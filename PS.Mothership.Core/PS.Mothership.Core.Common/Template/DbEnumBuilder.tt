<#@ template debug="true" hostSpecific="true" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Data" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Data" #> 
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data.SqlClient" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="ConfigurationAccessor.tt" #>
<#@ include file="Helper.tt" #>
<#@ output extension=".txt" #>
 
<#

///////////////////////TEMPLATE PARAMETES////////////////////////////////////
    var config = new ConfigurationAccessor(this.ResolvePathLocal(Path.GetDirectoryName(Host.TemplateFile)));
    
    var connections = config.ConnectionStrings;
    var appSettings = config.AppSettings;
    
    var connectionsDict = new Dictionary<string, string>();

    // load the connection string
    if (connections.Count != 0)
    {
         // Get the collection elements. 
         foreach (ConnectionStringSettings connection in  connections)
         {                
            connectionsDict.Add(connection.Name, connection.ConnectionString);   
         }
    }    

    //Enum value, column name, Enum namespace
    var enumDescriptionColumnName =  appSettings["enumDescriptionColumnName"] != null ? appSettings["enumDescriptionColumnName"].Value : "Name";
    var tableEndingName= appSettings["tableEndingName"] !=null ?  appSettings["tableEndingName"].Value : "Lut";
    var flagName= appSettings["flagName"] !=null ? appSettings["flagName"].Value  : "Flag";
    var enumNameSpace = appSettings["enumNameSpace"] !=null ? appSettings["enumNameSpace"].Value  : "PS.Mothership.Core.Common.Template";
    var dataBaseName= string.Empty;

    // structure to hold data    
    var classList = new List<DataHolder>();

    var fileManager = EntityFrameworkTemplateFileManager.Create(this);
    var codeGenerationTools = new CodeGenerationTools(this);

    if(connectionsDict.Count >0)
    {
        foreach (var connection in  connectionsDict)
        {
              // get the connection information
            var contextName= connection.Key;
            var connectionString = connection.Value;

            // get dbname
            dataBaseName = GetDataBaseName(connectionString);

            // build query
            var queryString = string.Format(SYS_TABLES_SQL, enumDescriptionColumnName, tableEndingName);

            // get all the table names
            var tableNames = GetTableNames(queryString, connectionString);


            // loop through table names and get the value
            foreach (var tname in tableNames)
            {
                 queryString = string.Format(USER_TABLES_SQL, tname);                 
                 var cl = new DataHolder();
                 
                 cl.ContextName = contextName; 
                 cl.DataBaseName = dataBaseName;  
                 cl.TableName = tname;    
                 
                // check the flag status
                if(tname.ToLower().IndexOf(flagName.ToLower()) != -1)
                {
                    cl.isFlag = true;
                    cl.FlagValue = FLAG_VALUES;
                }
                else
                {
                    cl.FlagValue = "";
                }

                 // run the query to do the enum
                 GetEnumData(queryString, connectionString,enumDescriptionColumnName,ref cl);                  
                 classList.Add(cl);
            }
        }    
    }   
#> 

<#
    foreach (var cls in classList)
    {
        // if there is no data, contiune to the next one
        if(cls.DataCount == 0) continue;
        var enumName = ConvertCaseString(cls.TableName);	
        var contextName= ConvertCaseString(cls.ContextName);	

        fileManager.StartNewFile(contextName + enumName + "Enum.cs");
#>
using System;
using System.Runtime.Serialization;

namespace <#=enumNameSpace+"."+contextName #>
{
    <#=cls.FlagValue #>
    [DataContract]
    public enum <#=enumName #>Enum : <#=cls.Type #>
    {
       <#
        foreach(var data in cls.KeyValue)
        {#>[EnumMember]<#=data.Key #> = <#=data.Value #>,
       <#}#> 
    }
}
<#
    }
    // close file manager
    fileManager.Process();    
 #>    