<#@ template debug="true" hostSpecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Data" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Data" #> 
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data.SqlClient" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="ConfigurationAccessor.tt" #>
<#@ include file="Helper.tt" #>
<#@ output extension=".txt" #>
 
<#
     

///////////////////////TEMPLATE PARAMETES////////////////////////////////////
    var config = new ConfigurationAccessor(this.ResolvePathLocal(Path.GetDirectoryName(Host.TemplateFile)));
    
    var connections = config.ConnectionStrings;
    var appSettings = config.AppSettings;
    
    var connectionsDict = new Dictionary<string, string>();
    var dataBaseList = new List<string>();
    var ignoreLocalServer= "LocalSqlServer";
    
    // load the connection string
    if (connections.Count != 0)
    {
         // Get the collection elements. 
         foreach (ConnectionStringSettings connection in  connections)
         {                
            if(string.Compare(ignoreLocalServer,connection.Name, true)==0) continue;            
            connectionsDict.Add(connection.Name, connection.ConnectionString);   
         }
    }    

    //Enum value, column name, Enum namespace
    var enumDescriptionColumnName =  appSettings["enumDescriptionColumnName"] != null ? appSettings["enumDescriptionColumnName"].Value : "Name";   
    var enumDescriptionValueColumnName =  appSettings["enumDescriptionValueColumnName"] != null ? appSettings["enumDescriptionValueColumnName"].Value : "Description";   
    var tableEndingName= appSettings["tableEndingName"] !=null ?  appSettings["tableEndingName"].Value : "Enum";
    var flagName= appSettings["flagName"] !=null ? appSettings["flagName"].Value  : "Flag";
    var enumNameSpace = appSettings["enumNameSpace"] !=null ? appSettings["enumNameSpace"].Value  : "PS.Mothership.Core.Common.Template";
    var dataBaseName= string.Empty;

    // structure to hold data    
    var classList = new List<DataHolder>();

    var fileManager = EntityFrameworkTemplateFileManager.Create(this);
    var codeGenerationTools = new CodeGenerationTools(this);

    if(connectionsDict.Count >0)
    {
        foreach (var connection in  connectionsDict)
        {
              // get the connection information
            var contextName= connection.Key;
            var connectionString = connection.Value;

            // get dbname
            // if the database has processed once
            // don't generate it again
            dataBaseName = GetDataBaseName(connectionString);            
            if(dataBaseList.Contains(dataBaseName)) continue;
            dataBaseList.Add(dataBaseName);

            // build query
            var queryString = string.Format(SYS_TABLES_SQL, enumDescriptionColumnName, tableEndingName);                       

            // get all the table names
            var tableNamesDict = GetTableNames(queryString, connectionString);

            // loop through table names and get the value
            foreach (var dict in tableNamesDict)
            {                
                var tname = dict.Key;
                var schemaName= dict.Value;
           
                queryString = string.Format(USER_TABLES_SQL, tname);          

                var cl = new DataHolder();
                 
                cl.ContextName = contextName;
                cl.DataBaseName = dataBaseName;
                cl.TableName = tname;
                cl.SchemaName = schemaName;
 
                // check the flag status
                if(tname.ToLower().IndexOf(flagName.ToLower()) != -1)
                {
                    cl.isFlag = true;
                    cl.FlagValue = FLAG_VALUES;
                }
                else
                {
                    cl.FlagValue = "";
                }

                 // run the query to do the enum
                 GetEnumData(queryString, connectionString,enumDescriptionColumnName,enumDescriptionValueColumnName,
                    ref cl);                  
                 classList.Add(cl);
            }
        }    
    }   
#> 

<#
    // The name space will hold the SCHEMA NAME rather than
    // the CONTEXT or KEY Name from the app/web config file
    foreach (var cls in classList)
    {
        // if there is no data, contiune to the next one
        if(cls.DataCount == 0) continue;
        var enumName = cls.TableName;
        
        // remove the schema name from the enum name
        enumName = enumName.Replace(cls.SchemaName + ".", "");        
        enumName = ConvertCaseString(enumName);	  
         
        var schemaName= ConvertCaseString(cls.SchemaName);	        
        //var contextName= ConvertCaseString(cls.ContextName);	

        var className= enumName.Substring(0,enumName.Length-4);
        var collectionClassName= className  + "Collection";
        var listName= className + "List";

        fileManager.StartNewFile(schemaName + enumName + ".cs");
#>
using System;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Collections.Generic;

namespace <#=enumNameSpace+"."+schemaName #>
{
    <#=cls.FlagValue #>
    [DataContract]
    public enum <#=enumName #> : <#=cls.Type #>
    {
       <#
        foreach(var data in cls.KeyValue)            
        {
        
        #>[Description("<#=data.Value.EnumDescription#>")][EnumMember]<#=data.Key #> = <#=data.Value.EnumValue #>,
       <#}#> 
    }

    public class <#=className #>
    {
        <#        
        
        this.WriteLine(CreatePropertyString("EnumValue","long"));
        this.Write(AddTabForIndentation(2));
        this.WriteLine(CreatePropertyString("EnumName","string"));
        this.Write(AddTabForIndentation(2));
        this.WriteLine(CreatePropertyString("EnumDescription","string"));
        
        //create properties for additional fields.
        foreach(var field in cls.KeyValue[cls.KeyValue.Keys.First()].AdditionalFields)
        {               
            this.Write(AddTabForIndentation(2));
            this.WriteLine(CreatePropertyString(field.Value.Name,field.Value.FieldType));
        }            

        
        #>
    }

    /// <summary>
    /// This class is mainly for using the extended properties of Enum
    /// </summary>
    public static class <#=collectionClassName#>
    {
        private static List<<#=className#>> _list; 
        public static List<<#=className#>> <#=listName#>
        {
            get
            {
                if (_list == null)
                {   
                        _list = new List<<#=className#>>
                        {
                            <#= CreateNewClassString(className, cls.KeyValue,"EnumValue","EnumName","EnumDescription" )#>
                        };
                    
                }
                return _list;
            }

        }
    }
   
}
<#
    }
    // close file manager
    fileManager.Process();    
 #>    