<#@ template debug="true" hostSpecific="true" #>
<#@ include file="ConfigurationAccessor.tt" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Data" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Data.SqlClient" #> 
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

<#

///////////////////////TEMPLATE PARAMETES////////////////////////////////////
//Database connection string
// instantiate ConfigurationAccessor, THIS HAS BEEN EXTRACTED OUT
//ConnectionStringSettings connConfig = ConnectionStrings["PS_MS_DEV"];
//var connectionString = connConfig.ConnectionString.ToString();
//this.WriteLine(connectionString);
//

var config = new ConfigurationAccessor((IServiceProvider)this.Host);
var connectionString = config.ConnectionStrings["PS_MS_DEV"].ConnectionString.ToString(); 
//this.WriteLine(connectionString);

var projectPath = config.AppSettings["ProjectFile"].Value;
//this.WriteLine(projectPath);
//this.WriteLine(config.Project.Name); 

//Enum value column name:
var enumDescriptionColumnName = "Name";
var tableEndingName= "Lut";
var dataCount=0;

//Enum namespace
var enumNameSpace = "PS.Mothership.Core.Common.Template"; 

////////////////////////////////////////////////////////////////////////////


var fileManager = EntityFrameworkTemplateFileManager.Create(this);
var codeGenerationTools = new CodeGenerationTools(this);

//Open ADO connection
var connection = new SqlConnection(connectionString);
var command = connection.CreateCommand();
connection.Open();

var queryString= string.Format(@"SELECT DISTINCT t.NAME 
        FROM SYS.tables as t
        INNER JOIN SYS.columns AS c ON t.object_id = c.object_id
        AND c.name like '%{0}' and t.name like '%{1}'",enumDescriptionColumnName,tableEndingName);

//this.WriteLine(queryString);
command.CommandText = queryString;

#>

<#
var tableReader = command.ExecuteReader();
var enumTables = new List<string>();
while (tableReader.Read())
{
	enumTables.Add(tableReader["NAME"].ToString());
}
connection.Close();

foreach (var tableName in enumTables)
{
	connection.Open(); 
	
	//Get the enum name
	var enumName = ConvertCaseString(tableName);
	//fileManager.StartNewFile(projectPath + enumName + "Enum.cs");
    fileManager.StartNewFile(enumName + "Enum.cs");
    
    command.CommandText = string.Format("SELECT * FROM {0}",codeGenerationTools.Escape(tableName));
    var columnReader = command.ExecuteReader();
    
    var columnName = string.Empty;
    var queryColumnName= string.Empty;
    var columnType=columnReader.GetFieldType(0).ToString();
       

    for (int col = 0; col < columnReader.FieldCount; col++)
    {
        // Gets the column name 
        columnName =columnReader.GetName(col).ToString();                
        if(columnName.EndsWith(enumDescriptionColumnName))                
        {        
                queryColumnName = columnName;                                
        }                
    }

//Start write enum file:	
#>

using System;

namespace <#=enumNameSpace#>
{
    [Flags]
	public enum <#=enumName#>Enum : <#=GetType(columnType)#> 
	{

	<#
	

    // after finding the column read through
    // and build the enum
    dataCount =0;
    while (columnReader.Read())
    {
		//Fill only the values that the field "enumDescriptionColumnName" have value
		if(!string.IsNullOrEmpty(columnReader[queryColumnName].ToString().Trim()))
		{
                dataCount++;
	#>	<#=columnReader[queryColumnName].ToString()#> = <#=columnReader[0].ToString()#>,
	<#	}
	}
    if(dataCount ==0)
    {#>  
       None = 0
    <#}
#>
}
}
<#
	connection.Close();	
}
	fileManager.Process();
#>

<#+
		/// <summary>
        /// Converts the phrase to specified convention.
        /// </summary>
        /// <param name="phrase"></param>
        /// <param name="cases">The cases.</param>
        /// <returns>string</returns>
        public static string ConvertCaseString(string phrase)
        {
            phrase = phrase.ToLower().Replace("_", " ");
            string[] splittedPhrase = phrase.Split(' ', '-', '.');
            var sb = new StringBuilder();

            sb = new StringBuilder();

            foreach (String s in splittedPhrase)
            {
                char[] splittedPhraseChars = s.ToCharArray();
                if (splittedPhraseChars.Length > 0)
                {
                    splittedPhraseChars[0] = ((new String(splittedPhraseChars[0], 1)).ToUpper().ToCharArray())[0];
                }
                sb.Append(new String(splittedPhraseChars));
            }
            return sb.ToString();
        }

        public static string GetType(string originalType)
        {
            var d = new Dictionary<string, string>()
            {
                {"System.Int32", "int"},
                {"System.Int64", "long"},
            };

            if (d.ContainsKey(originalType))
                return d[originalType];

            return "int";
        }
#>


